#include "secrets.h"
#include "WiFi.h"
#include <WiFiClientSecure.h>
#include <MQTTClient.h>
#include <ArduinoJson.h>


// The MQTT topics that this device should publish/subscribe
#define AWS_IOT_PUBLISH_TOPIC   "esp32/pub"
//#define AWS_IOT_SUBSCRIBE_TOPIC "esp32/sub"
#define AWS_IOT_PUBLISH_TOPIC_1 "esp32/door"
#define AWS_IOT_PUBLISH_TOPIC_2 "esp32/movement"
#define AWS_IOT_SUBSCRIBE_TOPIC "esp32/light"

WiFiClientSecure net = WiFiClientSecure();
MQTTClient client = MQTTClient(256);

long lastMsg = 0;
char msg[50];
int value = 0;

String idUsuario = "example";
String idCasa = "1";

const int verde = 13; //Pines de cada led
const int blanco = 15;
const int rojo = 19;
const int azul = 23;
const int movimiento = 21;
const int apertura = 34;

void connectAWS()
{
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.println("Connecting to Wi-Fi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  // Configure WiFiClientSecure to use the AWS IoT device credentials
  net.setCACert(AWS_CERT_CA);
  net.setCertificate(AWS_CERT_CRT);
  net.setPrivateKey(AWS_CERT_PRIVATE);

  // Connect to the MQTT broker on the AWS endpoint we defined earlier
  client.begin(AWS_IOT_ENDPOINT, 8883, net);

  // Create a message handler
  client.onMessage(messageHandler);

  Serial.print("Connecting to AWS IOT");

  while (!client.connect(THINGNAME)) {
    Serial.print(".");
    delay(100);
  }

  if (!client.connected()) {
    Serial.println("AWS IoT Timeout!");
    return;
  }

  // Subscribe to a topic
  client.subscribe(AWS_IOT_SUBSCRIBE_TOPIC);

  Serial.println("AWS IoT Connected!");
}

/*void publishMessage()
{
  StaticJsonDocument<200> doc;
  doc["time"] = millis();
  doc["sensor_a0"] = random(1000);
  char jsonBuffer[512];
  serializeJson(doc, jsonBuffer); // print to client
  client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
}*/

void messageHandler(String &topic, String &payload) {



  Serial.println("incoming: " + topic + " - " + payload);

  StaticJsonDocument<256> doc;
  deserializeJson(doc, payload); 
  const char* estructura = doc["message"];
  Serial.print(estructura);

  if (String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHT_1|ON") && String(topic) == "esp32/light") {
              digitalWrite(blanco, HIGH);
              doc["ESTATUS_LED_1"] = "ON";
              char jsonBuffer[512];
              serializeJson(doc, jsonBuffer);
              client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
    
    

  } else if (String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHT_1|OFF") && String(topic) == "esp32/light") {
             digitalWrite(blanco, LOW);
             doc["ESTATUS_LED_1"] = "OFF";
             char jsonBuffer[512];
             serializeJson(doc, jsonBuffer);
             client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
  }

  if (String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHT_2|ON") && String(topic) == "esp32/light") {
             digitalWrite(verde, HIGH);
             doc["ESTATUS_LED_2"] = "ON";
             char jsonBuffer[512];
             serializeJson(doc, jsonBuffer);
             client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);             

  } else if(String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHT_2|OFF") && String(topic) == "esp32/light") {
             digitalWrite(verde, LOW);
             doc["ESTATUS_LED_2"] = "OFF";
             char jsonBuffer[512];
             serializeJson(doc, jsonBuffer);
             client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);              
  }

  if (String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHT_3|ON") && String(topic) == "esp32/light") {
            digitalWrite(azul, HIGH);
            doc["ESTATUS_LED_3"] = "ON";
            char jsonBuffer[512];
            serializeJson(doc, jsonBuffer);
            client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer); 

  } else if(String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHT_3|OFF") && String(topic) == "esp32/light") {
            digitalWrite(azul, LOW);
            doc["ESTATUS_LED_3"] = "OFF";
            char jsonBuffer[512];
            serializeJson(doc, jsonBuffer);
            client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer); 
  }

  if (String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHT_4|ON") && String(topic) == "esp32/light") {
            digitalWrite(rojo, HIGH);
            doc["ESTATUS_LED_4"] = "ON";
            char jsonBuffer[512];
            serializeJson(doc, jsonBuffer);
            client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);

  } else if(String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHT_4|OFF") && String(topic) == "esp32/light") {
            digitalWrite(rojo, LOW);
            doc["ESTATUS_LED_4"] = "OFF";
            char jsonBuffer[512];
            serializeJson(doc, jsonBuffer);
            client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
  }

  if (String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHTS|ON") && String(topic) == "esp32/light") {
        digitalWrite(blanco, HIGH);
        digitalWrite(verde, HIGH);
        digitalWrite(azul, HIGH);
        digitalWrite(rojo, HIGH);
        doc["ESTATUS_LEDS"] = "ON";
        char jsonBuffer[512];
        serializeJson(doc, jsonBuffer);
        client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);

  } else if(String(estructura) == (idUsuario + "|" + idCasa + "|" + "LIGHTS|OFF") && String(topic) == "esp32/light") {
        digitalWrite(blanco, LOW);
        digitalWrite(verde, LOW);
        digitalWrite(azul, LOW);
        digitalWrite(rojo, LOW);
        doc["ESTATUS_LEDS"] = "OFF";
        char jsonBuffer[512];
        serializeJson(doc, jsonBuffer);
        client.publish(AWS_IOT_PUBLISH_TOPIC, jsonBuffer);
  }
}

void sensor_movimiento(){
  StaticJsonDocument<256> doc;
  if(digitalRead(movimiento) == HIGH){
    
        
    doc["ESTATUS"] = "TRUE";
    doc["MESSAGE"] = "MOVIMIENTO";
    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);
    client.publish(AWS_IOT_PUBLISH_TOPIC_2, jsonBuffer); 
    
  }else{

    doc["ESTATUS"] = "FALSE";
    doc["MESSAGE"] = "MOVIMIENTO";
    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);
    client.publish(AWS_IOT_PUBLISH_TOPIC_2, jsonBuffer); 
  }
}

void sensor_apertura(){

  StaticJsonDocument<256> doc;
  if(digitalRead(apertura) == LOW){
    
    doc["ESTATUS"] = "FALSE";
    doc["MESSAGE"] = "APERTURA";
    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);
    client.publish(AWS_IOT_PUBLISH_TOPIC_1, jsonBuffer); 
    
  }else{

    
    doc["ESTATUS"] = "TRUE";
    doc["MESSAGE"] = "APERTURA";
    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);
    client.publish(AWS_IOT_PUBLISH_TOPIC_1, jsonBuffer); 
  }
}

void setup() {
Serial.begin(115200);
pinMode(blanco, OUTPUT);
pinMode(verde, OUTPUT);
pinMode(azul, OUTPUT);
pinMode(rojo, OUTPUT);
pinMode(movimiento, INPUT);
pinMode(apertura, INPUT);
connectAWS();

}

void loop() {
//publishMessage();
sensor_apertura();
sensor_movimiento();
client.loop();
delay(3000);

}


